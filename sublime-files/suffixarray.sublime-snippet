<snippet>
  <content><![CDATA[
void radix_sort(vector<pair<pair<int, int>, int>>& v) {
    int n = v.size();
    int mxs = -INF, mxf = -INF;
    for (int i = 0; i < n; i++)
        mxs = max(v[i].F.S, mxs), mxf = max(mxf, v[i].F.F);
    vector<int> count2(mxs + 1, 0);
    vector<int> count1(mxf + 1, 0);
    vector<pair<pair<int, int>, int>> sorted(n);
    vector<int> bucket_idx(mxs + 1, 0);
    for (int i = 0; i < n; i++) count2[v[i].F.S]++;
    for (int i = 1; i < mxs + 1; i++)
        bucket_idx[i] = bucket_idx[i - 1] + count2[i - 1];
    for (int i = 0; i < n; i++) sorted[bucket_idx[v[i].F.S]++] = v[i];
    v = sorted;
    for (int i = 0; i < n; i++) count1[v[i].F.F]++;
    bucket_idx.clear();
    bucket_idx.resize(mxf + 1, 0);
    for (int i = 1; i < mxf + 1; i++)
        bucket_idx[i] = bucket_idx[i - 1] + count1[i - 1];
    for (int i = 0; i < n; i++) sorted[bucket_idx[v[i].F.F]++] = v[i];
    v = sorted;
}

vector<int> computeSA(string& S) {
    string s = S + '$';
    int n = s.length();
    vector<int> p(n), c(n);
    vector<pair<char, int>> a(n);
    for (int i = 0; i < n; i++) a[i] = {s[i], i};
    sort(a.begin(), a.end());
    for (int i = 0; i < n; i++) p[i] = a[i].S;
    c[p[0]] = 0;
    for (int i = 1; i < n; i++) c[p[i]] = c[p[i - 1]] + (a[i].F != a[i - 1].F);
    int k = 0;
    while ((1 << k) < n) {
        vector<pair<pair<int, int>, int>> v(n);
        for (int i = 0; i < n; i++) v[i] = {{c[i], c[(i + (1 << k)) % n]}, i};
        radix_sort(v);
        for (int i = 0; i < n; i++) p[i] = v[i].S;
        c[p[0]] = 0;
        for (int i = 1; i < n; i++)
            c[p[i]] = c[p[i - 1]] + (v[i].F != v[i - 1].F);
        k++;
    }
    return p;
}
]]></content>
  <tabTrigger>suff</tabTrigger>
  <description>suffixarray</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>